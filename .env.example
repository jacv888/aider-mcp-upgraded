###############################################
# 🔐 Aider-MCP Universal Configuration Template (.env)
# 🌐 Supports Python + JavaScript/TypeScript frameworks
# 📁 Copy this file to `.env` and insert real keys
# 🚫 Never commit real API keys to version control
# 🧩 This is a template — it contains no active credentials
# 
# ✨ NEW: Universal Framework Support
# 🐍 Python: Django, FastAPI, Flask, pytest, MCP
# 🌐 JS/TS: React, Next.js, Zod, TypeScript, Astro, SolidJS
# 🎯 70%+ token reduction across ALL frameworks
###############################################

# 🛠️ MCP SERVER CONFIGURATION
# Path configuration for MCP server deployment - Auto-detected by setup script
MCP_SERVER_ROOT=PLACEHOLDER_PROJECT_ROOT      # 🏠 Auto-set by app/scripts/setup.sh
MCP_SERVER_ENTRY_POINT=app/core/aider_mcp.py  # 🚪 Server entry point
UV_PATH=PLACEHOLDER_UV_PATH                   # 🔧 Auto-detected UV binary path

# 📦 REQUIRED DEPENDENCIES (Auto-installed by UV)
# python-dotenv, psutil, tiktoken, httpx - included in UV run command

# 🖥️ CLAUDE DESKTOP CONFIGURATION (Optional)
# Uncomment and set if Claude config is in a non-standard location
# CLAUDE_CONFIG_PATH=/custom/path/to/claude_desktop_config.json

# 🔑 AI PROVIDER API KEYS
# Required: Add your keys below to use the corresponding models
OPENAI_API_KEY=   # 🔓 Required for GPT-4.1 models
GEMINI_API_KEY=   # ✍️ Required for Gemini Flash (writing/docs)
ANTHROPIC_API_KEY=   # 🤖 Leave empty if Anthropic is unused

# 🧠 CONTEXT-AWARE FILE PRUNING (Phase 2)
# Intelligent context extraction to reduce token usage by 60-80%
ENABLE_CONTEXT_EXTRACTION=true      # 🎯 Enable context-aware file pruning
CONTEXT_DEFAULT_MAX_TOKENS=4000     # 🎚️ Default token budget per file
CONTEXT_MIN_RELEVANCE_SCORE=3.0     # 📊 Minimum relevance score threshold

# 🤖 UNIVERSAL AUTO-DETECTION (Phase 2.5) ✨ ENHANCED
# Automatically detect function/class/component names from prompts for hands-free token reduction
# Now supports both Python and JavaScript/TypeScript frameworks
ENABLE_AUTO_TARGET_DETECTION=true   # 🚀 Enable automatic target detection from prompts

# 🎯 SMART TARGET RESOLUTION (Phase 2.6) ✨ NEW
# Resolve decorator targets to actual function names for better context extraction
ENABLE_TARGET_RESOLUTION=true       # 🔍 Enable decorator-aware target resolution

# 🌐 JAVASCRIPT/TYPESCRIPT FRAMEWORK SUPPORT (Phase 2.7) ✨ NEW
# Universal auto-detection and context extraction for modern JS/TS frameworks
ENABLE_JS_TS_AUTO_DETECTION=true    # 🚀 Enable React, Next.js, Zod, TypeScript support
SUPPORTED_JS_FRAMEWORKS=react,nextjs,zod,typescript,astro,solidjs  # 📋 Enabled frameworks

# 🎯 UNIVERSAL FRAMEWORK EXAMPLES:
# Python: "Fix the calculate_sum function" → auto-detects calculate_sum
# React: "Update the LoginForm component" → auto-detects LoginForm
# Next.js: "Fix getServerSideProps function" → auto-detects getServerSideProps  
# Zod: "Update the UserSchema validation" → auto-detects UserSchema
# TypeScript: "Fix the ApiResponse interface" → auto-detects ApiResponse

# 🔒 AUTO-CONFLICT DETECTION (Phase 3.1) ✨ NEW
# Intelligent conflict prevention for parallel task execution
ENABLE_CONFLICT_DETECTION=true      # 🛡️ Enable automatic file conflict detection
DEFAULT_CONFLICT_HANDLING=auto      # 🎯 Default mode: auto|warn|ignore
CONFLICT_DETECTION_TIMEOUT=5        # ⏱️ Max seconds for conflict detection process
ENABLE_CONFLICT_LOGGING=true        # 📝 Log detailed conflict detection events
CONFLICT_REPORT_VERBOSITY=standard  # 📊 Report detail level: minimal|standard|verbose

# 🛡️ SYSTEM RESILIENCE SETTINGS (🧠 Runtime stability tuning)
MAX_TASK_QUEUE_SIZE=10               # ⏳ Max queued tasks before blocking
MAX_CONCURRENT_TASKS=3               # 🚦 Max parallel executions
CPU_USAGE_THRESHOLD=75.0             # 💻 Pause if CPU exceeds this %
MEMORY_USAGE_THRESHOLD=80.0          # 🧠 Pause if memory exceeds this %
CIRCUIT_BREAKER_FAILURE_THRESHOLD=3  # 🛑 Failures before circuit breaks
CIRCUIT_BREAKER_RESET_TIMEOUT=60     # 🔁 Cooldown period (seconds)
HEALTH_CHECK_INTERVAL=30             # 📊 Health check frequency (seconds)

# 💰 COST & BUDGET MANAGEMENT (Aider-MCP Functions) - Prevent expensive surprises
MAX_COST_PER_TASK=5.00              # 💵 Maximum cost per task (USD)
MAX_DAILY_COST=50.00                # 📅 Daily spending limit (USD)
MAX_MONTHLY_COST=500.00             # 📊 Monthly spending limit (USD)
COST_WARNING_THRESHOLD=1.00         # ⚠️ Warn when task exceeds this cost (USD)
ENABLE_COST_TRACKING=true           # 📈 Enable detailed cost analytics
ENABLE_COST_LOGGING=false           # 🔍 Console logging (off by default)
# 💲 MODEL PRICING (per 1M tokens, USD) - Easy to update when prices change
# OpenAI GPT-4.1 Models
GPT_4_1_INPUT_PRICE=2.00
GPT_4_1_OUTPUT_PRICE=8.00
GPT_4_1_MINI_INPUT_PRICE=0.40
GPT_4_1_MINI_OUTPUT_PRICE=1.60
GPT_4_1_NANO_INPUT_PRICE=0.10
GPT_4_1_NANO_OUTPUT_PRICE=0.40

# Google Gemini 2.5 Models
GEMINI_PRO_INPUT_PRICE=1.25
GEMINI_PRO_OUTPUT_PRICE=10.00

# Anthropic Claude Sonnet 4
CLAUDE_SONNET_4_INPUT_PRICE=3.00
CLAUDE_SONNET_4_OUTPUT_PRICE=15.00

# 🧠 STRATEGIC MODEL SELECTION
# Leave empty for automatic strategic selection (recommended)
AIDER_MODEL=

# 🎯 COMPLEXITY-BASED MODEL SELECTION
AIDER_MODEL_HARD=gpt-4.1-2025-04-14
AIDER_MODEL_COMPLEX=gemini/gemini-2.5-pro-preview-05-06
AIDER_MODEL_MEDIUM=gemini/gemini-2.5-flash-preview-05-20
AIDER_MODEL_EASY=gpt-4.1-mini-2025-04-14
AIDER_MODEL_SIMPLE=gpt-4.1-nano-2025-04-14

# 🛠️ TASK-TYPE MODEL SELECTION
AIDER_MODEL_WRITING=anthropic/claude-sonnet-4-20250514
AIDER_MODEL_DOCS=gemini/gemini-2.5-flash-preview-05-20
AIDER_MODEL_TESTING=gpt-4.1-mini-2025-04-14
AIDER_MODEL_REFACTOR=anthropic/claude-sonnet-4-20250514
AIDER_MODEL_OPTIMIZATION=gpt-4.1-2025-04-14
AIDER_MODEL_ALGORITHM=gemini/gemini-2.5-pro-preview-05-06

# 💻 UNIVERSAL TECHNOLOGY-SPECIFIC MODEL SELECTION ✨ ENHANCED
# Now optimized for both Python and JavaScript/TypeScript frameworks
# Python Frameworks
AIDER_MODEL_PYTHON=gpt-4.1-mini-2025-04-14      # Django, FastAPI, Flask
AIDER_MODEL_DJANGO=gpt-4.1-mini-2025-04-14      # Django-specific optimizations
AIDER_MODEL_FASTAPI=gpt-4.1-mini-2025-04-14     # FastAPI/Pydantic
AIDER_MODEL_FLASK=gpt-4.1-mini-2025-04-14       # Flask applications

# JavaScript/TypeScript Frameworks  
AIDER_MODEL_REACT=gpt-4.1-mini-2025-04-14       # React components, hooks, JSX
AIDER_MODEL_NEXTJS=gpt-4.1-mini-2025-04-14      # Next.js, App Router, SSR
AIDER_MODEL_JAVASCRIPT=gemini/gemini-2.5-flash-preview-05-20  # General JS
AIDER_MODEL_TYPESCRIPT=gpt-4.1-mini-2025-04-14  # TypeScript, interfaces, types
AIDER_MODEL_ZOD=gpt-4.1-mini-2025-04-14         # Zod schema validation
AIDER_MODEL_NODE=gpt-4.1-mini-2025-04-14        # Node.js backend
AIDER_MODEL_EXPRESS=gpt-4.1-mini-2025-04-14     # Express.js APIs

# Frontend Technologies
AIDER_MODEL_VUE=gpt-4.1-mini-2025-04-14         # Vue.js components
AIDER_MODEL_ASTRO=gpt-4.1-mini-2025-04-14       # Astro components
AIDER_MODEL_SOLIDJS=gpt-4.1-mini-2025-04-14     # SolidJS reactive components
AIDER_MODEL_CSS=gemini/gemini-2.5-flash-preview-05-20  # CSS, Tailwind, styling

# Backend & Database
AIDER_MODEL_DATABASE=gpt-4.1-mini-2025-04-14    # SQL, NoSQL, ORMs
AIDER_MODEL_API=gemini/gemini-2.5-flash-preview-05-20    # REST, GraphQL APIs
AIDER_MODEL_BACKEND=gpt-4.1-mini-2025-04-14     # Backend services
AIDER_MODEL_FRONTEND=gemini/gemini-2.5-flash-preview-05-20  # Frontend apps

# ⚡ PERFORMANCE-BASED MODEL SELECTION
AIDER_MODEL_FAST=gemini/gemini-2.5-flash-preview-05-20
AIDER_MODEL_QUICK=gpt-4.1-nano-2025-04-14
AIDER_MODEL_DEBUG=gpt-4.1-mini-2025-04-14

# ⚙️ ADDITIONAL CONFIGURATION
AIDER_NO_AUTO_COMMITS=true
AIDER_NO_SHOW_MODEL_WARNINGS=true

# 📊 PHASE 2A: PERFORMANCE & HEALTH ANALYTICS (Separate from cost management)
LOG_ENABLE_JSON_FILE=true            # 📋 Enable structured JSON logging for analytics
LOG_ENABLE_STRUCTURED_DATA=true      # 📋 Include [key=value] structured data
LOG_ENABLE_METRICS_EXTRACTION=true   # 📈 Enable automated metrics extraction
METRICS_EXTRACTION_INTERVAL=300      # ⏱️ Extract metrics every N seconds (0=disabled)

# 🎯 AUTO-DETECTION ANALYTICS LOGGING (Monthly chunked like cost logs)
ENABLE_AUTO_DETECTION_LOGGING=true   # 🔍 Enable dedicated auto-detection event logging
AUTO_DETECTION_LOG_PRETTY=false      # 🎨 Pretty-format JSON (true) or minified (false)

# 📅 MONTHLY LOG CHUNKING (Standardized across all log types)
# All logs now use monthly chunking: operational_2025-06.json, auto_detection_2025-06.json
# This matches the cost logs pattern: costs_2025-06.json
# Benefits: Easy correlation, time-based analysis, consistent archival

# 📝 LOGGING CONFIGURATION (Phase 2A Analytics)
LOG_ENABLE_FILE_STORAGE=true         # 📁 Enable persistent log files
LOG_DIRECTORY=logs                   # 📂 Log storage directory
LOG_MAX_FILE_SIZE_MB=10              # 📏 Max size per log file (MB)
LOG_BACKUP_COUNT=5                   # 🔄 Number of rotated backup files
LOG_LEVEL_OPERATIONAL=INFO           # 📊 Operational log level (INFO/WARNING/ERROR)
LOG_LEVEL_DEBUG=DEBUG                # 🔧 Debug log level (DEBUG/INFO)
LOG_ENABLE_DEBUG_FILE=false          # 🐛 Create separate debug.log file
LOG_ENABLE_CONSOLE=true              # 🖥️ Enable console output
LOG_FORMAT=standard                  # 📄 Log format: standard|json|minimal
LOG_JSON_PRETTY_PRINT=false          # 🎨 Pretty-print JSON (false for performance)

# 📋 ANALYTICS SYSTEM ARCHITECTURE:
# 💰 COST MANAGEMENT → Use Aider-MCP Functions (get_cost_summary, estimate_task_cost, etc.)
# ⚡ PERFORMANCE & HEALTH → Use Phase 2A Analytics (metrics_extractor, generate_reports)
# 🎯 NO DUPLICATION → Each system handles its specialized domain

# 📋 Configuration Priority Order:
# 1. This file (.env) - HIGHEST PRIORITY
# 2. ~/.config/aider/.env - Medium priority
# 3. Current directory fallback .env - Lowest priority

###############################################
# 🌐 UNIVERSAL FRAMEWORK SUPPORT SUMMARY
###############################################

# 🎯 SUPPORTED FRAMEWORKS & AUTO-DETECTION:
# 
# PYTHON FRAMEWORKS:
# ✅ Django: Auto-detects models, views, forms, admin classes
# ✅ FastAPI: Auto-detects endpoints, Pydantic models, dependencies
# ✅ Flask: Auto-detects routes, blueprints, decorators
# ✅ pytest: Auto-detects test functions, fixtures, parametrized tests
# ✅ MCP: Auto-detects @mcp.tool() decorated functions
#
# JAVASCRIPT/TYPESCRIPT FRAMEWORKS:  
# ✅ React: Auto-detects components, hooks, context providers
# ✅ Next.js: Auto-detects API routes, getServerSideProps, App Router
# ✅ Zod: Auto-detects schema definitions, validation objects
# ✅ TypeScript: Auto-detects interfaces, types, enums
# ✅ Node.js: Auto-detects modules, exports, async functions
# ✅ Express: Auto-detects routes, middleware, error handlers
# ✅ Astro: Auto-detects components, frontmatter functions
# ✅ SolidJS: Auto-detects reactive components, signals
#
# UNIVERSAL CAPABILITIES:
# 🚀 70%+ token reduction across ALL supported frameworks
# 🎯 Automatic target detection from natural language prompts
# 🔍 Smart context extraction regardless of language/framework
# 📊 Unified analytics across Python and JavaScript/TypeScript
# ⚡ Optimal model selection per framework and task type
# 🛡️ Conflict detection for mixed-language monorepos
#
# EXAMPLE AUTO-DETECTION PROMPTS:
# "Fix the calculate_sum function"                    → Python function
# "Update the LoginForm React component"              → React component  
# "Create Zod schema for user validation"             → Zod schema
# "Add getServerSideProps to Next.js page"           → Next.js function
# "Fix the User interface in TypeScript"             → TypeScript interface
# "Update Django User model authentication"          → Django model method
# "Create FastAPI endpoint for user registration"    → FastAPI route
# "Add Flask route with authentication decorator"    → Flask route function
#
# FULL-STACK PROJECT SUPPORT:
# 🏗️ Seamless handling of Python backend + React/Next.js frontend
# 🔄 Automatic framework detection based on file extensions
# 📊 Unified token reduction and analytics across all stacks
# ⚡ Parallel processing with framework-specific optimizations
#
# CONFIGURATION EXAMPLES:
# ENABLE_JS_TS_AUTO_DETECTION=true    # Enable JS/TS framework support
# ENABLE_TARGET_RESOLUTION=true       # Enable decorator-aware detection  
# ENABLE_CONTEXT_EXTRACTION=true      # Enable universal context extraction
# ENABLE_AUTO_TARGET_DETECTION=true   # Enable prompt-based auto-detection
